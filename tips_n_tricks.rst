ヒント集
--------

以下のヒント集に従うと、xpressive の効率を最大限に引き出せる。


パターンのコンパイルは一度とし、再利用せよ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

正規表現のコンパイル（動的、静的によらない）は、マッチや検索の実行より\ **何倍もの**\コストを要する。可能であれば :cpp:struct:`basic_regex\<>` のコンパイルは一度だけにし、あとは再利用せよ（事あるごとに再作成してはならない）。

:cpp:struct:`basic_regex\<>` オブジェクトはいかなる正規表現アルゴリズムによっても変更されないので、正規表現（と所属するすべての文法）の初期化が完了しさえすれば完全にスレッド安全である。パターンの再利用で一番簡単な方法は、:cpp:struct:`basic_regex\<>` オブジェクトを static const にすることである。


match_results<> オブジェクトを再利用せよ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:cpp:struct:`match_results\<>` オブジェクトは動的に確保したメモリをキャッシュする。そのため、正規表現検索を何度も行う場合は同じ :cpp:struct:`match_results\<>` オブジェクトを再利用するほうがずっとよい。

注意：:cpp:struct:`match_results\<>` オブジェクトはスレッド安全でないため、スレッドを超えて再利用してはならない。


match_results<> オブジェクトを引数に取るアルゴリズムを使用せよ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

これも同様である。検索を複数回行う場合は、:cpp:struct:`match_results\<>` オブジェクトを引数に取る正規表現アルゴリズムを使用し、毎回同じ :cpp:struct:`match_results\<>` オブジェクトを使用すべきだ。:cpp:struct:`match_results\<>` オブジェクトを与えないと一時オブジェクトが作成され、アルゴリズムが結果を返すときに破棄される。オブジェクトがキャッシュしていたメモリは解放され、次回また再確保されてしまう。


null 終端文字列に対してはイテレータの範囲を引数に取るアルゴリズムを使用せよ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

xpressive は :cpp:func:`regex_match()` および :cpp:func:`regex_search()` アルゴリズムについて、C 形式の null 終端文字列を操作する多重定義を提供している。イテレータの範囲を引数に取る多重定義を使用すべきだ。null 終端文字列を正規表現アルゴリズムに渡すと、終端のイテレータを計算するために :cpp:func:`!strlen` が呼び出されてしまう。文字列の長さが事前に分かっているのであれば、``[begin,end)`` 組を取る正規表現を呼び出してこのオーバーヘッドを回避できる。


静的正規表現を使用せよ
^^^^^^^^^^^^^^^^^^^^^^

静的正規表現は同じ内容の動的版に対して、平均で約 10% から 15% 高速である。これだけでも静的版に慣れておく価値がある。


:cpp:enumerator:`regex_constants::syntax_option_type::optimize` を理解せよ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:cpp:enumerator:`~regex_constants::syntax_option_type::optimize` フラグを正規表現コンパイラに渡すと、パターンの解析により多くの時間をかけるようになる。この結果、パターンによっては実行が高速になるが、コンパイル時間が長くなり、しばしばパターンが要するメモリの量が増える。パターンを再利用するのであれば :cpp:enumerator:`~regex_constants::syntax_option_type::optimize` は効果があると考えてよい。パターンを一度しか使用しないのであれば、:cpp:enumerator:`~regex_constants::syntax_option_type::optimize` は避けるべきだ。


よくある落とし穴
^^^^^^^^^^^^^^^^

xpressive の落とし穴に足を踏み入れないように、以下のことを覚えておくとよい。


文法は単一のスレッドで作成せよ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

静的正規表現では正規表現を入れ子にして文法を構築するが、外側の正規表現をコンパイルすると外側と内側の両方の正規表現オブジェクト、およびそれらが直接・間接的に参照するすべての正規表現オブジェクトが更新される。そのため、グローバルな正規表現オブジェクトが文法に関与すると危険である。単一のスレッドから正規表現文法を構築するのが最善である。一度構築してしまえば、正規表現文法は複数のスレッドから問題なく実行できる。


入れ子の数量子に注意せよ
~~~~~~~~~~~~~~~~~~~~~~~~

これは多くの正規表現エンジンに共通の落とし穴であり、パターンによっては指数的に効率が悪化する。よくあるのは :regexp:`(a*)*` のようにパターン内の数量子付きの項が他の数量子に入れ子になっているというものだが、多くの場合発見しにくいのが問題である。数量子が入れ子になっているパターンには注意せよ。
