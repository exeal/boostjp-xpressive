付録 4：パフォーマンスの比較
----------------------------

.. contents::
   :depth: 1
   :local:


xpressive の効率は `Boost.Regex`_ に負けず劣らずである。パフォーマンスベンチマークを走らせ、静的正規表現、動的正規表現、Boost.Regex を 2 つのプラットフォーム（gcc（Cygwin）、Visual C++）で比較した。テストは短いマッチと長い検索を行った。いずれのプラットフォームでも、短いマッチでは xpressive が高速であり、長い検索では大体 `Boost.Regex`_ と同じだった。\ [#]_


xpressive 対 Boost.Regex（GCC（Cygwin））
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 静的正規表現
* 動的正規表現
* `Boost.Regex`_

以上のパフォーマンス比較結果を次に示す。


テスト仕様
~~~~~~~~~~

ハードウェア：
    ハイパースレッディング 3GHz Xeon 1GB RAM
オペレーティングシステム：
    Windows XP Professional + Cygwin
コンパイラ：
    GNU C++ 3.4.4（Cygwin 版）
C++ 標準ライブラリ：
    GNU libstdc++ 3.4.4
`Boost.Regex`_ のバージョン：
    1.33+ 、BOOST_REGEX_USE_CPP_LOCALE, BOOST_REGEX_RECURSIVE
xpressive のバージョン：
    0.9.6a


比較 1：短いマッチ
~~~~~~~~~~~~~~~~~~

以下のテストでは入力文字列に対する正規表現マッチに要した時間を評価項目とする。各テスト結果の上側の数値は最速時間に対して正規化しており、1.0 が最もよい。下側の（括弧で囲んだ）数値は実際の秒時間である。最良の結果は強調してある。

.. .. include:: ../perf/gcc/short_matches.rst

.. list-table:: 短いマッチ
   :header-rows: 1

   * - 静的 xpressive
     - 動的 xpressive
     - Boost
     - テキスト
     - 正規表現
   * - **1 (8.79e-07s)**
     - **1.08 (9.54e-07s)**
     - 2.51 (2.2e‑06s)
     - :regex-input:`100-` といった、メッセージ文字列を含む FTP 応答行。
     - :regexp:`^([0-9]+)(\\-| |$)(.*)$`
   * - **1.06 (1.07e-06s)**
     - **1 (1.01e-06s)**
     - 4.01 (4.06e-06s)
     - :regex-input:`1234-5678-1234-456`
     - :regexp:`([[:digit:]]{4}[- ]){3}[[:digit:]]{3,4}`
   * - **1 (1.4e-06s)**
     - 1.13 (1.58e-06s)
     - 2.89 (4.05e-06s)
     - :regex-input:`john_maddock@compuserve.com`
     - :regexp:`^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$`
   * - **1 (1.28e-06s)**
     - 1.16 (1.49e-06s)
     - 3.07 (3.94e-06s)
     - :regex-input:`foo12@foo.edu`
     - :regexp:`^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$`
   * - **1 (1.22e-06s)**
     - 1.2 (1.46e-06s)
     - 3.22 (3.93e-06s)
     - :regex-input:`bob.smith@foo.tv`
     - :regexp:`^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$`
   * - **1.04 (8.64e-07s)**
     - **1 (8.34e-07s)**
     - 2.5 (2.09e-06s)
     - :regex-input:`EH10 2QQ`
     - :regexp:`^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$`
   * - 1.11 (9.09e-07s)
     - **1 (8.19e-07s)**
     - 2.47 (2.03e-06s)
     - :regex-input:`G1 1AA`
     - :regexp:`^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$`
   * - 1.12 (9.38e-07s)
     - **1 (8.34e-07s)**
     - 2.5 (2.08e-06s)
     - :regex-input:`SW1 1ZZ`
     - :regexp:`^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$`
   * - **1 (7.9e-07s)**
     - **1.06 (8.34e-07s)**
     - 2.49 (1.96e-06s)
     - :regex-input:`4/1/2001`
     - :regexp:`^[[:digit:]]{1,2}/[[:digit:]]{1,2}/[[:digit:]]{4}$`
   * - **1 (8.19e-07s)**
     - **1.04 (8.49e-07s)**
     - 2.4 (1.97e-06s)
     - :regex-input:`12/12/2001`
     - :regexp:`^[[:digit:]]{1,2}/[[:digit:]]{1,2}/[[:digit:]]{4}$`
   * - **1.09 (8.95e-07s)**
     - **1 (8.19e-07s)**
     - 2.4 (1.96e-06s)
     - :regex-input:`123`
     - :regexp:`^[-+]?[[:digit:]]*\\.?[[:digit:]]*$`
   * - 1.11 (8.79e-07s)
     - **1 (7.9e-07s)**
     - 2.57 (2.03e-06s)
     - :regex-input:`+3.14159`
     - :regexp:`^[-+]?[[:digit:]]*\\.?[[:digit:]]*$`
   * - **1.09 (8.94e-07s)**
     - **1 (8.19e-07s)**
     - 2.47 (2.03e-06s)
     - :regex-input:`-3.14159`
     - :regexp:`^[-+]?[[:digit:]]*\\.?[[:digit:]]*$`


比較 2：長い検索
~~~~~~~~~~~~~~~~

次のテストは長い英文テキストから\ **すべての**\マッチを見つけるのに要した時間を測定した。`Project Gutenberg`_ の `Mark Twain`_ の完全なテキストを使用した。テキストの長さは 19 MB である。上と同様に上側の数値は正規化時間であり、下側の数値は実際の時間である。最短時間は強調した。

.. .. include:: ../perf/gcc/long_twain_search.rst

.. list-table:: 長い検索
   :header-rows: 1

   * - 静的 xpressive
     - 動的 xpressive
     - Boost
     - 正規表現
   * - **1 (0.0263s)**
     - **1 (0.0263s)**
     - 1.78 (0.0469s)
     - :regexp:`Twain`
   * - **1 (0.0234s)**
     - **1 (0.0234s)**
     - 1.79 (0.042s)
     - :regexp:`Huck[[:alpha:]]+`
   * - 1.84 (1.26s)
     - 2.21 (1.51s)
     - **1 (0.687s)**
     - :regexp:`[[:alpha:]]+ing`
   * - **1.09 (0.192s)**
     - 2 (0.351s)
     - **1 (0.176s)**
     - :regexp:`^[^ ]*?Twain`
   * - 1.41 (0.08s)
     - 1.21 (0.0684s)
     - **1 (0.0566s)**
     - :regexp:`Tom|Sawyer|Huckleberry|Finn`
   * - 1.56 (0.195s)
     - 1.12 (0.141s)
     - **1 (0.125s)**
     - :regexp:`(Tom|Sawyer|Huckleberry|Finn).{0,30}river|river.{0,30}(Tom|Sawyer|Huckleberry|Finn)`


xpressive 対 Boost.Regex（Visual C++）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 静的 xpressive
* 動的 xpressive
* `Boost.Regex`_

以上のパフォーマンス比較結果を次に示す。


テスト仕様
~~~~~~~~~~

ハードウェア：
    ハイパースレッディング 3GHz Xeon 1GB RAM
オペレーティングシステム：
    Windows XP Professional
コンパイラ：
    Visual C++ .NET 2003（7.1）
C++ 標準ライブラリ：
    Dinkumware バージョン 313
`Boost.Regex`_ のバージョン：
    1.33+ 、BOOST_REGEX_USE_CPP_LOCALE, BOOST_REGEX_RECURSIVE
xpressive のバージョン：
    0.9.6a


比較 1：短いマッチ
~~~~~~~~~~~~~~~~~~

以下のテストでは入力文字列に対する正規表現マッチに要した時間を評価項目とする。各テスト結果の上側の数値は最速時間に対して正規化しており、1.0 が最もよい。下側の（括弧で囲んだ）数値は実際の秒時間である。最良の結果は強調してある。

.. .. include::../perf/msvc/short_matches.rst

.. list-table:: 短いマッチ
   :header-rows: 1

   * - 静的 xpressive
     - 動的 xpressive
     - Boost
     - テキスト
     - 正規表現
   * - **1 (3.2e-007s)**
     - 1.37 (4.4e-007s)
     - 2.38 (7.6e‑007s)
     - :regex-input:`100-` といった、メッセージ文字列を含む FTP 応答行。
     - :regexp:`^([0-9]+)(\\-| |$)(.*)$`
   * - **1 (6.4e-007s)**
     - 1.12 (7.15e-007s)
     - 1.72 (1.1e-006s)
     - :regex-input:`1234-5678-1234-456`
     - :regexp:`([[:digit:]]{4}[- ]){3}[[:digit:]]{3,4}`
   * - **1 (9.82e-007s)**
     - 1.3 (1.28e-06s)
     - 1.61 (1.58e-006s)
     - :regex-input:`john_maddock@compuserve.com`
     - :regexp:`^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$`
   * - **1 (8.94e-007s)**
     - 1.3 (1.16e-006s)
     - 1.7 (1.1e-006s)
     - :regex-input:`foo12@foo.edu`
     - :regexp:`^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$`
   * - **1 (9.09e-007s)**
     - 1.28 (1.16e-006s)
     - 1.67 (1.52e-006s)
     - :regex-input:`bob.smith@foo.tv`
     - :regexp:`^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$`
   * - **1 (3.06e-007s)**
     - **1.07 (3.28e-007s)**
     - 1.95 (5.96e-007s)
     - :regex-input:`EH10 2QQ`
     - :regexp:`^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$`
   * - **1 (3.13e-007s)**
     - **1.09 (3.42e-007s)**
     - 1.86 (5.81e-007s)
     - :regex-input:`G1 1AA`
     - :regexp:`^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$`
   * - **1 (3.2e-007s)**
     - **1.09 (3.5e-007s)**
     - 1.86 (5.96e-007s)
     - :regex-input:`SW1 1ZZ`
     - :regexp:`^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$`
   * - **1 (2.68e-007s)**
     - 1.22 (3.28e-007s)
     - 2 (5.36e-007s)
     - :regex-input:`4/1/2001`
     - :regexp:`^[[:digit:]]{1,2}/[[:digit:]]{1,2}/[[:digit:]]{4}$`
   * - **1 (2.76e-007s)**
     - 1.16 (3.2e-007s)
     - 1.94 (5.36e-007s)
     - :regex-input:`12/12/2001`
     - :regexp:`^[[:digit:]]{1,2}/[[:digit:]]{1,2}/[[:digit:]]{4}$`
   * - **1 (2.98e-007s)**
     - **1 (3.06e-007s)**
     - 1.85 (5.51e-007s)
     - :regex-input:`123`
     - :regexp:`^[-+]?[[:digit:]]*\\.?[[:digit:]]*$`
   * - **1 (3.2e-007s)**
     - 1.12 (3.58e-007s)
     - 1.81 (5.81e-007s)
     - :regex-input:`+3.14159`
     - :regexp:`^[-+]?[[:digit:]]*\\.?[[:digit:]]*$`
   * - **1 (3.28e-007s)**
     - 1.11 (3.65e-007s)
     - 1.77 (5.81e-007s)
     - :regex-input:`-3.14159`
     - :regexp:`^[-+]?[[:digit:]]*\\.?[[:digit:]]*$`


比較 2：長い検索
~~~~~~~~~~~~~~~~

次のテストは長い英文テキストから\ **すべての**\マッチを見つけるのに要した時間を測定した。`Project Gutenberg`_ の `Mark Twain`_ の完全なテキストを使用した。テキストの長さは 19 MB である。上と同様に上側の数値は正規化時間であり、下側の数値は実際の時間である。最短時間は強調した。

.. .. include:: ../perf/msvc/long_twain_search.rst

.. list-table:: 長い検索
   :header-rows: 1

   * - 静的 xpressive
     - 動的 xpressive
     - Boost
     - 正規表現
   * - **1 (0.019s)**
     - **1 (0.019s)**
     - 2.98 (0.0566s)
     - :regexp:`Twain`
   * - **1 (0.0176s)**
     - **1 (0.0176s)**
     - 3.17 (0.0556s)
     - :regexp:`Huck[[:alpha:]]+`
   * - 3.62 (1.78s)
     - 3.97 (1.95s)
     - **1 (0.492s)**
     - :regexp:`[[:alpha:]]+ing`
   * - 2.32 (0.344s)
     - 3.06 (0.453s)
     - **1 (0.148s)**
     - :regexp:`^[^ ]*?Twain`
   * - **1 (0.0576s)**
     - **1.05 (0.0606s)**
     - 1.15 (0.0664s)
     - :regexp:`Tom|Sawyer|Huckleberry|Finn`
   * - 1.24 (0.164s)
     - 1.44 (0.191s)
     - **1 (0.133s)**
     - :regexp:`(Tom|Sawyer|Huckleberry|Finn).{0,30}river|river.{0,30}(Tom|Sawyer|Huckleberry|Finn)`


.. [#] おことわり：すべてのベンチマークについて、真のテストとは\ **あなたの**\パターンと\ **あなたの**\入力に対して\ **あなたの**\プラットフォームで xpressive がどう動くかである。よってあなたのアプリケーションで効率が重要なのであれば、あなた自身でテストをするのが最もよい。

.. _Boost.Regex: http://www.boost.org/libs/regex/
.. _Project Gutenberg: http://promo.net/pg/
.. _Mark Twain: http://www.gutenberg.org/dirs/3/2/0/3200/3200.zip
